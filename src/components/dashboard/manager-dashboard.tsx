"use client";

import React from "react";
import { User } from "@/types";
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { DollarSign, Users, Activity, LoaderCircle } from "lucide-react";
import { getDownlineIdsAndUsers } from "@/lib/hierarchy";
import TeamView from "@/components/team-view";
import ActionableInsights from "@/components/actionable-insights";
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from "recharts";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { getAllUsers, getAllCustomers } from "@/lib/firestore";

interface ManagerDashboardProps {
  user: User;
}

const ManagerDashboard: React.FC<ManagerDashboardProps> = ({ user }) => {
  const [allUsers, setAllUsers] = React.useState<User[]>([]);
  const [allCustomers, setAllCustomers] = React.useState<User[]>([]);
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const [usersData, customersData] = await Promise.all([
        getAllUsers(),
        getAllCustomers(),
      ]);
      setAllUsers(usersData);
      setAllCustomers(customersData);
      setLoading(false);
    };
    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="flex h-full w-full items-center justify-center">
        <LoaderCircle className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }
  
  const { users: downlineUsers } = getDownlineIdsAndUsers(user.id, allUsers);
  const teamIncome = downlineUsers.reduce((acc, u) => acc + u.totalIncome, 0);

  const chartData = downlineUsers
    .sort((a,b) => b.totalIncome - a.totalIncome)
    .slice(0, 5)
    .map(u => ({
    name: u.name.split(' ')[0],
    income: u.totalIncome,
    fill: "var(--color-income)"
  }));

  const chartConfig = {
    income: {
      label: "Income (LKR)",
      color: "hsl(var(--primary))",
    },
  };

  return (
    <div className="flex flex-col gap-6">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Personal Income</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">LKR {user.totalIncome.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Your total accumulated commission</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Team Income</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">LKR {teamIncome.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Total from your downline</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Team Size</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+{downlineUsers.length} Members</div>
            <p className="text-xs text-muted-foreground">Direct and indirect reports</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Team Performance</CardTitle>
              <CardDescription>Income generated by your top team members.</CardDescription>
            </CardHeader>
            <CardContent className="pl-2">
              <ChartContainer config={chartConfig} className="h-[250px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={chartData} accessibilityLayer>
                    <XAxis
                      dataKey="name"
                      stroke="#888888"
                      fontSize={12}
                      tickLine={false}
                      axisLine={false}
                    />
                    <YAxis
                      stroke="#888888"
                      fontSize={12}
                      tickLine={false}
                      axisLine={false}
                      tickFormatter={(value) => `LKR ${value / 1000}k`}
                    />
                     <ChartTooltip
                      cursor={false}
                      content={<ChartTooltipContent indicator="dot" />}
                    />
                    <Bar dataKey="income" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </ChartContainer>
            </CardContent>
          </Card>
        </div>
        <div className="lg:col-span-1">
          <ActionableInsights user={user} allUsers={allUsers} allCustomers={allCustomers} />
        </div>
      </div>
      
      <Card>
        <CardHeader>
            <CardTitle>Team Details</CardTitle>
            <CardDescription>Details of customers registered by your direct and indirect team members.</CardDescription>
        </CardHeader>
        <CardContent>
            <TeamView downlineUsers={downlineUsers} />
        </CardContent>
      </Card>
    </div>
  );
};

export default ManagerDashboard;
