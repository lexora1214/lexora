// A robust service worker based on the "Network-first, falling back to cache" strategy.

const CACHE_NAME = 'lexoranet-cache-v1';
const urlsToCache = [
  '/',
  '/manifest.json',
  '/my-logo.png',
  // Note: Next.js build artifacts (like JS, CSS chunks) are added to cache dynamically during 'install'.
];

// URLs that should always be fetched from the network first.
// This is good for API calls and the main HTML pages to ensure freshness.
const networkFirstUrls = [
  '/',
  '/login',
  '/signup',
];

// URLs for external resources that should be cached.
const externalUrlsToCache = [
    'https://fonts.googleapis.com/',
    'https://fonts.gstatic.com/',
    'https://maps.googleapis.com/maps/api/js', // Cache the Google Maps API script
];


// --- INSTALL: Cache the app shell and build artifacts ---
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then(async (cache) => {
      console.log('Opened cache');
      // Add build manifest files to cache. These are generated by Next.js.
      try {
        const manifest = await fetch('/_next/build-manifest.json').then(res => res.json());
        const assetUrls = new Set(Object.values(manifest.pages).flat());
        // Add JS chunks from the low priority files list
        if (manifest.lowPriorityFiles) {
          manifest.lowPriorityFiles.forEach((file) => assetUrls.add(`/_next/${file}`));
        }
        await cache.addAll([...urlsToCache, ...Array.from(assetUrls)]);
      } catch (e) {
        console.error('Failed to cache build manifest assets:', e);
        // Fallback to just the basic URLs if manifest fails
        await cache.addAll(urlsToCache);
      }
      return cache;
    })
  );
});

// --- ACTIVATE: Clean up old caches ---
self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});


// --- FETCH: Intercept network requests ---
self.addEventListener('fetch', (event) => {
    const requestUrl = new URL(event.request.url);

    // Strategy 1: Network-first for main pages
    if (networkFirstUrls.includes(requestUrl.pathname)) {
        event.respondWith(
            fetch(event.request)
                .then((response) => {
                    // If we get a valid response, cache it and return it
                    if (response && response.status === 200) {
                        const responseToCache = response.clone();
                        caches.open(CACHE_NAME).then((cache) => {
                            cache.put(event.request, responseToCache);
                        });
                    }
                    return response;
                })
                .catch(() => {
                    // If network fails, try to get it from the cache
                    return caches.match(event.request);
                })
        );
        return;
    }

    // Strategy 2: Cache-first for external assets like Google Fonts and the Maps API script
    if (externalUrlsToCache.some(url => requestUrl.href.startsWith(url))) {
         event.respondWith(
            caches.open(CACHE_NAME).then(async (cache) => {
                const cachedResponse = await cache.match(event.request);
                if (cachedResponse) {
                    return cachedResponse;
                }
                
                // If not in cache, fetch, cache, and return
                const networkResponse = await fetch(event.request);
                // Use a clone to put in cache, as response body can only be read once
                cache.put(event.request, networkResponse.clone());
                return networkResponse;
            })
        );
        return;
    }


    // Strategy 3: Cache-first for all other requests (like JS, CSS, images)
    event.respondWith(
        caches.match(event.request).then((response) => {
            // Return from cache if found
            if (response) {
                return response;
            }

            // Otherwise, fetch from network
            return fetch(event.request).then((networkResponse) => {
                // IMPORTANT: Don't cache Firestore or other API requests
                if (requestUrl.href.includes('firestore.googleapis.com')) {
                    return networkResponse;
                }
                
                // If we get a valid response, cache it for next time
                 if (networkResponse && networkResponse.status === 200) {
                    const responseToCache = networkResponse.clone();
                    caches.open(CACHE_NAME).then((cache) => {
                        cache.put(event.request, responseToCache);
                    });
                }
                return networkResponse;
            });
        })
    );
});